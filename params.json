{"name":"Android-gradle-localization-plugin","tagline":"Gradle plugin for generating localized string resources","body":"android-gradle-localization-plugin\r\n==================================\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/pl.droidsonroids.gradle.localization/android-gradle-localization-plugin/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/pl.droidsonroids.gradle.localization/android-gradle-localization-plugin) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-android--gradle--localization--plugin-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/902)  [![Build Status](https://travis-ci.org/koral--/android-gradle-localization-plugin.svg?branch=master)](https://travis-ci.org/koral--/android-gradle-localization-plugin)\r\n\r\nGradle plugin for generating localized string resources\r\n\r\n## Overview\r\nThis plugin generates Android string resource XML files from CSV file.\r\nGeneration has to be invoked as additional gradle task.\r\n \r\n##Supported features\r\n * non-translatable resources - `translatable=\"false\"` XML attribute\r\n * auto-escaping double quotes, apostrophes and newlines\r\n * auto-quoting leading and trailing spaces\r\n * syntax validation - duplicated, empty, invalid names detection\r\n * comments\r\n  \r\n## Usage\r\n1. Add dependency to the __top-level__ `build.gradle` file.\r\n Your file should look like this:\r\n ```\r\n \r\n  buildscript {\r\n     repositories {\r\n         mavenLocal()\r\n         mavenCentral()\r\n     }\r\n     dependencies {\r\n         classpath 'com.android.tools.build:gradle:0.13.+'\r\n         classpath 'pl.droidsonroids.gradle.localization:android-gradle-localization-plugin:1.0.+'\r\n     }\r\n }\r\n ```\r\n2. Apply plugin and add configuration to `build.gradle` of the application, eg:\r\n ```\r\n apply plugin: 'localization'\r\n localization\r\n     {\r\n         csvFile=file('translations.csv')\r\n         OR\r\n         csvFileURI='https://docs.google.com/spreadsheets/d/<key>/export?format=csv'\r\n     }\r\n ```\r\n `csvFileURI` can be any valid URI, not necessarily Google Docs' one \r\n \r\n3. Invoke `localization` gradle task. Task may be invoked from commandline or from Android Studio GUI.\r\n * from commandline: `./gradlew localization` (or `gradlew.bat localization` on Windows)\r\n * from GUI: menu `View->Tool Windows->Gradle` and double click `localization`<br>\r\n \r\n Non existent folders will be created. __WARNING__ existing XML files will be overwritten.\r\n\r\n##Example\r\nThe following CSV file:\r\n```csv\r\nname,default    ,pl       ,comment   ,translatable\r\nfile,File       ,\"Plik\"   ,file label,\r\napp ,Application,,,false\r\n```\r\nwill produce 2 XML files:\r\n* `values/strings.xml`:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources xmlns:tools=\"http://schemas.android.com/tools\">\r\n  <string name=\"file\">File</string><!-- file label -->\r\n  <string name=\"app\" translatable=\"false\">Application</string>\r\n</resources>\r\n```\r\n* `values-pl/strings.xml`:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources xmlns:tools=\"http://schemas.android.com/tools\">\r\n  <string name=\"file\">Plik</string><!-- file label -->\r\n</resources>\r\n```\r\n\r\n##Configuration\r\n`localization` extension in `build.gradle` can contain several configuration options. All of them \r\nexcept CSV file location are optional and has reasonable default values.<br>\r\nCSV file location. __Exactly one of them__ must be specified:\r\n* `csvFile` - CSV File, Gradle's `file()` can be used to retrieve files by path relative to module location or absolute   \r\n* `csvFileURI` - CSV file URI\r\n\r\nCSV format:\r\n* `defaultColumnName` - default='default', column name which corresponds to default localization \r\n(`values` folder)\r\n* `csvStrategy` - default=`null` (library default strategy, equivalent of \r\n[CSVStrategy.DEFAULT_STRATEGY](https://lucene.apache.org/solr/4_0_0/solr-core/org/apache/solr/internal/csv/CSVStrategy.html#DEFAULT_STRATEGY))\r\n - see [CSVStrategy javadoc](https://lucene.apache.org/solr/4_0_0/solr-core/org/apache/solr/internal/csv/CSVStrategy.html),\r\n and [sources](http://grepcode.com/file/repo1.maven.org/maven2/org.apache.solr/solr-core/4.8.0/org/apache/solr/internal/csv/CSVStrategy.java#CSVStrategy)\r\n since documentation is quite incomplete\r\n\r\nThe following options turn off some character escaping and substitutions, can be useful if you have \r\nsomething already escaped in CSV:\r\n* `escapeApostrophes` - default=true, if set to false apostrophes (`'`) won't be escaped\r\n* `escapeQuotes` - default=true, if set to false double quotes (`\"`)  won't be escaped\r\n* `escapeNewLines` - default=true, if set to false newline characters won't be escaped\r\n* `escapeBoundarySpaces` - default=true, if set to false leading and trailing spaces\r\nwon't be escaped so they will be effectively removed at compile time\r\n* `convertTripleDotsToHorizontalEllipsis` - default=true, if set to false triple dots (`...`) won't be converted to ellipsis entity `&#8230`\r\n* `escapeSlashes` - default=true, if set to false slashes (`\\`) won't be escaped\r\n* `normalizationForm` - default=[Normalizer.Form.NFC](http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.Form.html#NFC)\r\nif set to `null` Unicode normalization won't be performed, see (javadoc of Normalizer)[http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.Form.html#NFC]\r\nfor more details\r\n* `tagEscapingStrategy` - default=IF_TAGS_ABSENT, defines X(H)TML tag brackets (&lt; and &gt;) escaping strategy\r\npossible values:\r\n * ALWAYS - brackets are always escaped. Eg. \"&lt;\" in source becomes \"&amp;lt;\" in output XML\r\n * NEVER - brackets are never escaped. Eg. \"&lt;\" in source is passed without change to output XML\r\n * IF_TAGS_ABSENT - Brackets aren't escaped if text contains tags. Eg.\r\n   &lt;b&gt;bold&lt;/b&gt;} will be passed without change, but \"if x&lt;4 then…\" becomes \"if x&amp;lt;4 then…\".\r\n   See [JSoup](http://jsoup.org) - library used to detect tags\r\n\r\nAdvanced options:\r\n* `ignorableColumns` - default=[], columns from that list will be ignored during parsing\r\n* `allowNonTranslatableTranslation` - default=false, if set to true resources marked \r\nnon-translatable but translated are permitted\r\n* `allowEmptyTranslations` - default=false, if set to true then empty values are permitted\r\n \r\n##License\r\n\r\nMIT License<br>\r\nSee [LICENSE](LICENSE) file.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}